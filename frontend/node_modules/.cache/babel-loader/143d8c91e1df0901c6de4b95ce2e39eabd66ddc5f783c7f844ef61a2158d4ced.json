{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\Proyectos-programacion\\\\Lab1_von_neumann\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ControlPanel from './components/ControlPanel';\nimport CPUView from './components/CPUView';\nimport MemoryView from './components/MemoryView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cpuState, setCpuState] = useState({});\n  const [memory, setMemory] = useState([]);\n  const [operation, setOperation] = useState(null);\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Función para llenar la memoria\n  const fillMemory = async (operation, dato1, dato2) => {\n    await fetch('http://localhost:3001/api/fill-memory', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        operation,\n        dato1,\n        dato2\n      })\n    });\n    fetchMemory(); // Actualizar la memoria después de llenarla\n  };\n\n  // Función para iniciar el ciclo completo\n  const startCycle = async () => {\n    const response = await fetch('http://localhost:3001/api/run-cycle');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setOperation(data.operation);\n    setIsFinished(data.finished);\n  };\n\n  // Función para ejecutar el ciclo paso a paso\n  const stepCycle = async () => {\n    const response = await fetch('http://localhost:3001/api/run-step-by-step');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setOperation(data.operation);\n    setIsFinished(data.finished);\n  };\n\n  // Función para pausar el ciclo\n  const pauseCycle = async () => {\n    await fetch('http://localhost:3001/api/pause-cycle', {\n      method: 'POST'\n    });\n  };\n\n  // Función para reanudar el ciclo\n  const resumeCycle = async () => {\n    await fetch('http://localhost:3001/api/resume-cycle', {\n      method: 'POST'\n    });\n  };\n\n  // Función para obtener el estado de la memoria\n  const fetchMemory = async () => {\n    const response = await fetch('http://localhost:3001/api/memory-status');\n    const data = await response.json();\n    setMemory(data);\n  };\n  useEffect(() => {\n    fetchMemory(); // Obtener el estado inicial de la memoria\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simulador Arquitectura von Neumann\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      fillMemory: fillMemory,\n      startCycle: startCycle,\n      stepCycle: stepCycle,\n      pauseCycle: pauseCycle,\n      resumeCycle: resumeCycle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CPUView, {\n      cpuState: cpuState,\n      operation: operation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MemoryView, {\n      memory: memory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yQHSSuXsX7R5w3SAaGkhPBnPy6U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ControlPanel","CPUView","MemoryView","jsxDEV","_jsxDEV","App","_s","cpuState","setCpuState","memory","setMemory","operation","setOperation","isFinished","setIsFinished","fillMemory","dato1","dato2","fetch","method","headers","body","JSON","stringify","fetchMemory","startCycle","response","data","json","registers","finished","stepCycle","pauseCycle","resumeCycle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/Documents/Proyectos-programacion/Lab1_von_neumann/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ControlPanel from './components/ControlPanel';\nimport CPUView from './components/CPUView';\nimport MemoryView from './components/MemoryView';\n\nfunction App() {\n  const [cpuState, setCpuState] = useState({});\n  const [memory, setMemory] = useState([]);\n  const [operation, setOperation] = useState(null);\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Función para llenar la memoria\n  const fillMemory = async (operation, dato1, dato2) => {\n    await fetch('http://localhost:3001/api/fill-memory', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ operation, dato1, dato2 }),\n    });\n    fetchMemory();  // Actualizar la memoria después de llenarla\n  };\n\n  // Función para iniciar el ciclo completo\n  const startCycle = async () => {\n    const response = await fetch('http://localhost:3001/api/run-cycle');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setOperation(data.operation);\n    setIsFinished(data.finished);\n  };\n\n  // Función para ejecutar el ciclo paso a paso\n  const stepCycle = async () => {\n    const response = await fetch('http://localhost:3001/api/run-step-by-step');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setOperation(data.operation);\n    setIsFinished(data.finished);\n  };\n\n  // Función para pausar el ciclo\n  const pauseCycle = async () => {\n    await fetch('http://localhost:3001/api/pause-cycle', { method: 'POST' });\n  };\n\n  // Función para reanudar el ciclo\n  const resumeCycle = async () => {\n    await fetch('http://localhost:3001/api/resume-cycle', { method: 'POST' });\n  };\n\n  // Función para obtener el estado de la memoria\n  const fetchMemory = async () => {\n    const response = await fetch('http://localhost:3001/api/memory-status');\n    const data = await response.json();\n    setMemory(data);\n  };\n\n  useEffect(() => {\n    fetchMemory();  // Obtener el estado inicial de la memoria\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Simulador Arquitectura von Neumann</h1>\n\n      <ControlPanel\n        fillMemory={fillMemory}\n        startCycle={startCycle}\n        stepCycle={stepCycle}\n        pauseCycle={pauseCycle}\n        resumeCycle={resumeCycle}\n      />\n\n      <CPUView cpuState={cpuState} operation={operation} />\n      <MemoryView memory={memory} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMiB,UAAU,GAAG,MAAAA,CAAOJ,SAAS,EAAEK,KAAK,EAAEC,KAAK,KAAK;IACpD,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACnDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEZ,SAAS;QAAEK,KAAK;QAAEC;MAAM,CAAC;IAClD,CAAC,CAAC;IACFO,WAAW,CAAC,CAAC,CAAC,CAAE;EAClB,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC,qCAAqC,CAAC;IACnE,MAAMS,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClCpB,WAAW,CAACmB,IAAI,CAACE,SAAS,CAAC;IAC3BjB,YAAY,CAACe,IAAI,CAAChB,SAAS,CAAC;IAC5BG,aAAa,CAACa,IAAI,CAACG,QAAQ,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAML,QAAQ,GAAG,MAAMR,KAAK,CAAC,4CAA4C,CAAC;IAC1E,MAAMS,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClCpB,WAAW,CAACmB,IAAI,CAACE,SAAS,CAAC;IAC3BjB,YAAY,CAACe,IAAI,CAAChB,SAAS,CAAC;IAC5BG,aAAa,CAACa,IAAI,CAACG,QAAQ,CAAC;EAC9B,CAAC;;EAED;EACA,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMd,KAAK,CAAC,uCAAuC,EAAE;MAAEC,MAAM,EAAE;IAAO,CAAC,CAAC;EAC1E,CAAC;;EAED;EACA,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMf,KAAK,CAAC,wCAAwC,EAAE;MAAEC,MAAM,EAAE;IAAO,CAAC,CAAC;EAC3E,CAAC;;EAED;EACA,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAME,QAAQ,GAAG,MAAMR,KAAK,CAAC,yCAAyC,CAAC;IACvE,MAAMS,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClClB,SAAS,CAACiB,IAAI,CAAC;EACjB,CAAC;EAED5B,SAAS,CAAC,MAAM;IACdyB,WAAW,CAAC,CAAC,CAAC,CAAE;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAK8B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/B,OAAA;MAAA+B,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE3CnC,OAAA,CAACJ,YAAY;MACXe,UAAU,EAAEA,UAAW;MACvBU,UAAU,EAAEA,UAAW;MACvBM,SAAS,EAAEA,SAAU;MACrBC,UAAU,EAAEA,UAAW;MACvBC,WAAW,EAAEA;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAEFnC,OAAA,CAACH,OAAO;MAACM,QAAQ,EAAEA,QAAS;MAACI,SAAS,EAAEA;IAAU;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDnC,OAAA,CAACF,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAACjC,EAAA,CAzEQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA2EZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}