{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\Proyectos-programacion\\\\Lab1_von_neumann\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cpuState, setCpuState] = useState({});\n  const [memory, setMemory] = useState([]); // Estado para la memoria\n  const [operation, setOperation] = useState('Suma'); // Estado para la operación seleccionada\n  const [dato1, setDato1] = useState(0); // Primer dato\n  const [dato2, setDato2] = useState(0); // Segundo dato\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Obtener el estado de la CPU y la memoria\n  const fetchCpuState = async () => {\n    const response = await fetch('http://localhost:3001/api/cpu-status');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setMemory(data.memory); // Guardar el estado de la memoria\n    setIsFinished(data.finished);\n  };\n\n  // Enviar la operación seleccionada y los datos al backend para llenar la memoria\n  const fillMemory = async () => {\n    const response = await fetch('http://localhost:3001/api/fill-memory', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        operation,\n        dato1,\n        dato2\n      }) // Enviar operación y datos\n    });\n    const data = await response.json();\n    console.log(data.message); // Mostrar mensaje en la consola\n\n    // Actualizar el estado de la CPU y la memoria después de llenar la memoria\n    fetchCpuState();\n  };\n  useEffect(() => {\n    if (!isFinished) {\n      const interval = setInterval(() => {\n        fetchCpuState();\n      }, 1000); // Actualiza cada segundo\n\n      return () => clearInterval(interval);\n    }\n  }, [isFinished]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Von Neumann Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selecciona la operaci\\xF3n para llenar la memoria\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: operation,\n        onChange: e => setOperation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Suma\",\n          children: \"Suma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Resta\",\n          children: \"Resta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Multiplicaci\\xF3n\",\n          children: \"Multiplicaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Ingrese dato 1\",\n          value: dato1,\n          onChange: e => setDato1(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Ingrese dato 2\",\n          value: dato2,\n          onChange: e => setDato2(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fillMemory,\n        children: \"Llenar Memoria\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Estado de la CPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(cpuState, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Estado de la Memoria\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: memory.map((value, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JnjK/WNYeCEm3qKlY2NC5jZ6TBk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","cpuState","setCpuState","memory","setMemory","operation","setOperation","dato1","setDato1","dato2","setDato2","isFinished","setIsFinished","fetchCpuState","response","fetch","data","json","registers","finished","fillMemory","method","headers","body","JSON","stringify","console","log","message","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","placeholder","Number","onClick","border","map","index","_c","$RefreshReg$"],"sources":["C:/Users/hp/Documents/Proyectos-programacion/Lab1_von_neumann/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [cpuState, setCpuState] = useState({});\n  const [memory, setMemory] = useState([]);  // Estado para la memoria\n  const [operation, setOperation] = useState('Suma');  // Estado para la operación seleccionada\n  const [dato1, setDato1] = useState(0);  // Primer dato\n  const [dato2, setDato2] = useState(0);  // Segundo dato\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Obtener el estado de la CPU y la memoria\n  const fetchCpuState = async () => {\n    const response = await fetch('http://localhost:3001/api/cpu-status');\n    const data = await response.json();\n    setCpuState(data.registers);\n    setMemory(data.memory);  // Guardar el estado de la memoria\n    setIsFinished(data.finished);\n  };\n\n  // Enviar la operación seleccionada y los datos al backend para llenar la memoria\n  const fillMemory = async () => {\n    const response = await fetch('http://localhost:3001/api/fill-memory', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ operation, dato1, dato2 }),  // Enviar operación y datos\n    });\n\n    const data = await response.json();\n    console.log(data.message);  // Mostrar mensaje en la consola\n\n    // Actualizar el estado de la CPU y la memoria después de llenar la memoria\n    fetchCpuState();\n  };\n\n  useEffect(() => {\n    if (!isFinished) {\n      const interval = setInterval(() => {\n        fetchCpuState();\n      }, 1000); // Actualiza cada segundo\n\n      return () => clearInterval(interval);\n    }\n  }, [isFinished]);\n\n  return (\n    <div className=\"App\">\n      <h1>Von Neumann Simulator</h1>\n\n      <div>\n        <h3>Selecciona la operación para llenar la memoria</h3>\n        <select value={operation} onChange={(e) => setOperation(e.target.value)}>\n          <option value=\"Suma\">Suma</option>\n          <option value=\"Resta\">Resta</option>\n          <option value=\"Multiplicación\">Multiplicación</option>\n        </select>\n        <div>\n          <input\n            type=\"number\"\n            placeholder=\"Ingrese dato 1\"\n            value={dato1}\n            onChange={(e) => setDato1(Number(e.target.value))}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Ingrese dato 2\"\n            value={dato2}\n            onChange={(e) => setDato2(Number(e.target.value))}\n          />\n        </div>\n        <button onClick={fillMemory}>Llenar Memoria</button>\n      </div>\n\n      <div>\n        <h3>Estado de la CPU</h3>\n        <pre>{JSON.stringify(cpuState, null, 2)}</pre>\n      </div>\n\n      <div>\n        <h3>Estado de la Memoria</h3>\n        <table border=\"1\">\n          <tbody>\n            {memory.map((value, index) => (\n              <tr key={index}>\n                <td>{value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}